import React, { useState } from 'react';
import { useUser } from '@clerk/clerk-react';
import { autoTagImage, uploadArtworkWithTags } from '../../services/autoTagService';

const Upload = () => {
  const { user } = useUser();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: '',
    tags: '',
    isPublic: true
  });
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [isGeneratingTags, setIsGeneratingTags] = useState(false);
  const [autoGeneratedTags, setAutoGeneratedTags] = useState([]);
  const [message, setMessage] = useState('');

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedFile(file);
      setPreviewUrl(URL.createObjectURL(file));
      setAutoGeneratedTags([]);
      setMessage('');
    }
  };

  const handleGenerateTags = async () => {
    if (!selectedFile) {
      setMessage('Please select an image first');
      return;
    }

    if (!user) {
      setMessage('Please sign in to generate tags');
      return;
    }

    setIsGeneratingTags(true);
    setMessage('🔄 Analyzing image with AI...');

    try {
      const result = await autoTagImage(selectedFile, user.id);
      
      if (result.success) {
        setAutoGeneratedTags(result.tags);
        setFormData(prev => ({
          ...prev,
          tags: result.tags.join(', ')
        }));
        setMessage(`✅ Generated ${result.tags.length} tags automatically!`);
      } else {
        setMessage('❌ Failed to generate tags');
      }
    } catch (error) {
      console.error('Tag generation error:', error);
      setMessage('❌ Error generating tags. Please try again.');
    } finally {
      setIsGeneratingTags(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!selectedFile) {
      setMessage('❌ Please select an image file');
      return;
    }

    if (!formData.title.trim()) {
      setMessage('❌ Please enter a title for your artwork');
      return;
    }

    if (!user) {
      setMessage('❌ Please sign in to upload artwork');
      return;
    }

    setIsUploading(true);
    setMessage('🔄 Uploading artwork...');

    try {
      const artworkData = {
        image: selectedFile,
        title: formData.title,
        description: formData.description,
        artistName: user.fullName || user.username || 'Artist',
        category: formData.category,
        price: 0,
        customTags: formData.tags
      };

      const result = await uploadArtworkWithTags(artworkData, user.id);
      
      if (result.success) {
        setMessage('🎨 Artwork uploaded successfully with auto-generated tags!');
        
        // Reset form
        setFormData({
          title: '',
          description: '',
          category: '',
          tags: '',
          isPublic: true
        });
        setSelectedFile(null);
        setPreviewUrl('');
        setAutoGeneratedTags([]);
        
        const fileInput = document.querySelector('input[type="file"]');
        if (fileInput) fileInput.value = '';
        
      } else {
        setMessage('❌ Failed to upload artwork');
      }
    } catch (error) {
      console.error('Upload error:', error);
      setMessage(`❌ ${error.message}`);
    } finally {
      setIsUploading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file && file.type.startsWith('image/')) {
      setSelectedFile(file);
      setPreviewUrl(URL.createObjectURL(file));
      setAutoGeneratedTags([]);
      setMessage('');
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  // Add this check to show sign-in message
  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black pt-20 pb-10 px-4 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-white mb-4">Please Sign In</h1>
          <p className="text-gray-300 text-lg">You need to be signed in to upload artwork.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black pt-20 pb-10 px-4">
      <div className="container mx-auto max-w-2xl">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-white mb-4">Upload Artwork</h1>
          <p className="text-gray-300 text-lg">Share your creativity with the world</p>
          <p className="text-green-400 text-sm mt-2">Signed in as: {user.fullName || user.username}</p>
        </div>

        <form onSubmit={handleSubmit} className="bg-white/5 backdrop-blur-xl rounded-2xl p-6 border border-white/10">
          
          {/* Upload Area */}
          <div 
            className="border-2 border-dashed border-white/20 rounded-2xl p-8 text-center mb-6 hover:border-purple-500/50 transition-all duration-300 cursor-pointer"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onClick={() => document.getElementById('file-input').click()}
          >
            <input
              id="file-input"
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              className="hidden"
            />
            
            {previewUrl ? (
              <div className="relative">
                <img 
                  src={previewUrl} 
                  alt="Preview" 
                  className="max-w-full h-48 object-cover rounded-lg mx-auto mb-4 border border-white/20"
                />
                <p className="text-green-400 text-sm">✓ Image selected</p>
              </div>
            ) : (
              <>
                <div className="text-4xl mb-4">📁</div>
                <p className="text-white font-semibold mb-2">Drop your artwork here</p>
                <p className="text-gray-400 text-sm">or click to browse files</p>
                <p className="text-gray-500 text-xs mt-2">PNG, JPG, GIF up to 10MB</p>
              </>
            )}
          </div>

          {/* Auto-Tag Button */}
          {selectedFile && !isGeneratingTags && autoGeneratedTags.length === 0 && (
            <button
              type="button"
              onClick={handleGenerateTags}
              className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 text-white py-3 rounded-xl font-semibold mb-6 hover:shadow-lg hover:shadow-blue-500/30 transition-all duration-300 flex items-center justify-center space-x-2"
            >
              <span>🏷️</span>
              <span>Generate Auto-Tags with AI</span>
            </button>
          )}

          {/* Loading State for Tag Generation */}
          {isGeneratingTags && (
            <div className="text-center py-4 mb-6 bg-blue-500/10 rounded-xl border border-blue-500/20">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 mx-auto mb-2"></div>
              <p className="text-blue-300 text-sm">AI is analyzing your image...</p>
            </div>
          )}

          {/* Auto-Generated Tags Display */}
          {autoGeneratedTags.length > 0 && (
            <div className="mb-6 p-4 bg-purple-500/10 rounded-xl border border-purple-500/20">
              <p className="text-purple-300 text-sm font-semibold mb-2">
                🎯 AI Generated Tags ({autoGeneratedTags.length} found)
              </p>
              <div className="flex flex-wrap gap-2">
                {autoGeneratedTags.map((tag, index) => (
                  <span
                    key={index}
                    className="bg-purple-600/30 text-purple-200 px-3 py-1 rounded-full text-xs border border-purple-500/30"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Message Display */}
          {message && (
            <div className={`p-4 rounded-xl mb-6 ${
              message.includes('✅') || message.includes('🎨') ? 'bg-green-500/20 text-green-300 border border-green-500/30' : 
              message.includes('❌') ? 'bg-red-500/20 text-red-300 border border-red-500/30' : 
              'bg-blue-500/20 text-blue-300 border border-blue-500/30'
            }`}>
              {message}
            </div>
          )}

          {/* Form Fields */}
          <div className="space-y-6">
            <div>
              <label className="text-white font-medium mb-2 block">Title *</label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleChange}
                className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Enter artwork title"
                required
              />
            </div>

            <div>
              <label className="text-white font-medium mb-2 block">Description</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows="4"
                className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="Describe your artwork..."
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-white font-medium mb-2 block">Category</label>
                <select
                  name="category"
                  value={formData.category}
                  onChange={handleChange}
                  className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  <option value="">Select category</option>
                  <option value="digital">Digital Art</option>
                  <option value="photography">Photography</option>
                  <option value="painting">Painting</option>
                  <option value="3d">3D Art</option>
                  <option value="abstract">Abstract</option>
                  <option value="nature">Nature</option>
                </select>
              </div>

              <div>
                <label className="text-white font-medium mb-2 block">
                  Tags {autoGeneratedTags.length > 0 && '(AI Suggested)'}
                </label>
                <input
                  type="text"
                  name="tags"
                  value={formData.tags}
                  onChange={handleChange}
                  className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="e.g., abstract, nature, digital"
                />
                {autoGeneratedTags.length > 0 && (
                  <p className="text-purple-400 text-xs mt-1">
                    AI suggestions added. Feel free to edit!
                  </p>
                )}
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                name="isPublic"
                checked={formData.isPublic}
                onChange={(e) => setFormData({...formData, isPublic: e.target.checked})}
                className="w-4 h-4 text-purple-500 bg-white/10 border-white/20 rounded focus:ring-purple-500 focus:ring-2"
              />
              <label className="text-white">Make this artwork public</label>
            </div>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={isUploading || !selectedFile}
            className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 rounded-xl font-semibold text-lg hover:shadow-2xl hover:shadow-purple-500/30 transition-all duration-300 mt-8 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {isUploading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                <span>Uploading...</span>
              </>
            ) : (
              <span>🚀 Upload Artwork</span>
            )}
          </button>

          {/* Help Text */}
          <p className="text-gray-500 text-xs text-center mt-4">
            * Required fields. Use the "Generate Auto-Tags" button to get AI-powered tag suggestions.
          </p>
        </form>
      </div>
    </div>
  );
};

export default Upload;